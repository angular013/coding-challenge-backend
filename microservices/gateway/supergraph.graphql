schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Answer
  @join__owner(graph: QUESTIONNAIRE)
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  created: DateTime! @join__field(graph: QUESTIONNAIRE)
  question: Question! @join__field(graph: QUESTIONNAIRE)
  updated: DateTime! @join__field(graph: QUESTIONNAIRE)
  uuid: ID! @join__field(graph: QUESTIONNAIRE)
  value: String! @join__field(graph: QUESTIONNAIRE)
}

input AnswerInput {
  answerId: String
  answerSelected: String
}

input CreateAnswerInput {
  questionId: String!
  value: String!
}

input CreatePageInput {
  pageLevel: Int!
  questionnaireUUID: ID!
}

input CreateQuestionInput {
  pageId: String!
  question: String!
  questionTypeId: String!
}

input CreateQuestionTypeInput {
  name: String!
}

input CreateQuestionnaireInput {
  name: String!
}

input CreateUserInput {
  pages: [PageInput!]!
  questionnaireId: String!
  userId: String!
}

scalar DateTime

input DeleteAnswerInput {
  uuid: ID!
}

input DeletePageInput {
  uuid: ID!
}

input DeleteQuestionInput {
  uuid: ID!
}

input DeleteQuestionTypeInput {
  uuid: ID!
}

input DeleteQuestionnaireInput {
  uuid: ID!
}

input DeleteUserInput {
  uuid: ID!
}

type Mutation {
  createAnswer(input: CreateAnswerInput!): Answer! @join__field(graph: QUESTIONNAIRE)
  createPage(input: CreatePageInput!): Page! @join__field(graph: QUESTIONNAIRE)
  createQuestion(input: CreateQuestionInput!): Question! @join__field(graph: QUESTIONNAIRE)
  createQuestionType(input: CreateQuestionTypeInput!): QuestionType! @join__field(graph: QUESTIONNAIRE)
  createQuestionnaire(input: CreateQuestionnaireInput!): Questionnaire! @join__field(graph: QUESTIONNAIRE)
  createUserInput(input: [CreateUserInput!]!): [UserInput!]! @join__field(graph: USERINPUT)
  deleteAnswer(input: DeleteAnswerInput!): Answer! @join__field(graph: QUESTIONNAIRE)
  deletePage(input: DeletePageInput!): Page! @join__field(graph: QUESTIONNAIRE)
  deleteQuestion(input: DeleteQuestionInput!): Question! @join__field(graph: QUESTIONNAIRE)
  deleteQuestionType(input: DeleteQuestionTypeInput!): QuestionType! @join__field(graph: QUESTIONNAIRE)
  deleteQuestionnaire(input: DeleteQuestionnaireInput!): Questionnaire! @join__field(graph: QUESTIONNAIRE)
  deleteUserInput(input: DeleteUserInput!): UserInput! @join__field(graph: USERINPUT)
  updateAnswer(input: UpdateAnswerInput!): Answer! @join__field(graph: QUESTIONNAIRE)
  updatePage(input: UpdatePageInput!): Page! @join__field(graph: QUESTIONNAIRE)
  updateQuestion(input: UpdateQuestionInput!): Question! @join__field(graph: QUESTIONNAIRE)
  updateQuestionType(input: UpdateQuestionTypeInput!): QuestionType! @join__field(graph: QUESTIONNAIRE)
  updateQuestionnaire(input: UpdateQuestionnaireInput!): Questionnaire! @join__field(graph: QUESTIONNAIRE)
  updateUserInput(input: [UpdateUserInput!]!): [UserInput!]! @join__field(graph: USERINPUT)
}

type Page
  @join__owner(graph: QUESTIONNAIRE)
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  created: DateTime! @join__field(graph: QUESTIONNAIRE)
  pageLevel: Int! @join__field(graph: QUESTIONNAIRE)
  questionnaire: Questionnaire! @join__field(graph: QUESTIONNAIRE)
  questions: [Question]! @join__field(graph: QUESTIONNAIRE)
  updated: DateTime! @join__field(graph: QUESTIONNAIRE)
  uuid: ID! @join__field(graph: QUESTIONNAIRE)
}

input PageInput {
  pageId: String
  questions: [QuestionInput]
}

type Query {
  getAllAnswers: [Answer!]! @join__field(graph: QUESTIONNAIRE)
  getAllPages: [Page!]! @join__field(graph: QUESTIONNAIRE)
  getAllQuestionTypes: [QuestionType!]! @join__field(graph: QUESTIONNAIRE)
  getAllQuestionnaires: [Questionnaire!]! @join__field(graph: QUESTIONNAIRE)
  getAllQuestions: [Question!]! @join__field(graph: QUESTIONNAIRE)
  getAllUserInputs: [UserInput!]! @join__field(graph: USERINPUT)
  getAllUsers: [User!]! @join__field(graph: USERINPUT)
  getAnswer(uuid: ID!): Answer! @join__field(graph: QUESTIONNAIRE)
  getPage(uuid: ID!): Page! @join__field(graph: QUESTIONNAIRE)
  getQuestion(uuid: ID!): Question! @join__field(graph: QUESTIONNAIRE)
  getQuestionType(uuid: ID!): QuestionType! @join__field(graph: QUESTIONNAIRE)
  getQuestionnaire(uuid: ID!): Questionnaire! @join__field(graph: QUESTIONNAIRE)
  getUser(uuid: ID!): User! @join__field(graph: USERINPUT)
  getUserInput(uuid: ID!): UserInput! @join__field(graph: USERINPUT)
}

type Question
  @join__owner(graph: QUESTIONNAIRE)
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  answers: [Answer]! @join__field(graph: QUESTIONNAIRE)
  created: DateTime! @join__field(graph: QUESTIONNAIRE)
  page: Page! @join__field(graph: QUESTIONNAIRE)
  question: String! @join__field(graph: QUESTIONNAIRE)
  questiontype: QuestionType! @join__field(graph: QUESTIONNAIRE)
  updated: DateTime! @join__field(graph: QUESTIONNAIRE)
  uuid: ID! @join__field(graph: QUESTIONNAIRE)
}

input QuestionInput {
  answers: [AnswerInput]
  questionId: String
}

type QuestionType
  @join__owner(graph: QUESTIONNAIRE)
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  created: DateTime! @join__field(graph: QUESTIONNAIRE)
  name: String! @join__field(graph: QUESTIONNAIRE)
  questions: [Question] @join__field(graph: QUESTIONNAIRE)
  updated: DateTime! @join__field(graph: QUESTIONNAIRE)
  uuid: ID! @join__field(graph: QUESTIONNAIRE)
}

type Questionnaire
  @join__owner(graph: QUESTIONNAIRE)
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  created: DateTime! @join__field(graph: QUESTIONNAIRE)
  name: String! @join__field(graph: QUESTIONNAIRE)
  pages: [Page] @join__field(graph: QUESTIONNAIRE)
  updated: DateTime! @join__field(graph: QUESTIONNAIRE)
  uuid: ID! @join__field(graph: QUESTIONNAIRE)
}

input UpdateAnswerInput {
  questionId: String
  uuid: ID!
  value: String!
}

input UpdatePageInput {
  pageLevel: Int
  questionnaireUUID: ID
  uuid: ID!
}

input UpdateQuestionInput {
  pageId: String
  question: String
  questionTypeId: String
  uuid: ID!
}

input UpdateQuestionTypeInput {
  name: String!
  uuid: ID!
}

input UpdateQuestionnaireInput {
  name: String
  uuid: ID!
}

input UpdateUserInput {
  pages: [PageInput!]!
  questionnaireId: String
  userId: String!
}

type User
  @join__owner(graph: USERINPUT)
  @join__type(graph: USERINPUT, key: "uuid")
{
  password: String! @join__field(graph: USERINPUT)
  userInput: [UserInput]! @join__field(graph: USERINPUT)
  username: String! @join__field(graph: USERINPUT)
  uuid: ID! @join__field(graph: USERINPUT)
}

type UserInput
  @join__owner(graph: USERINPUT)
  @join__type(graph: USERINPUT, key: "uuid")
{
  answerId: String! @join__field(graph: USERINPUT)
  answerSelected: String! @join__field(graph: USERINPUT)
  created: DateTime! @join__field(graph: USERINPUT)
  pageId: String! @join__field(graph: USERINPUT)
  questionId: String! @join__field(graph: USERINPUT)
  questionnaireId: String! @join__field(graph: USERINPUT)
  updated: DateTime! @join__field(graph: USERINPUT)
  user: User! @join__field(graph: USERINPUT)
  uuid: ID! @join__field(graph: USERINPUT)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  QUESTIONNAIRE @join__graph(name: "questionnaire" url: "http://localhost:4010/graphql")
  USERINPUT @join__graph(name: "userInput" url: "http://localhost:4020/graphql")
}
