schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Answer
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  created: DateTime!
  question: Question!
  updated: DateTime!
  uuid: ID!
  value: String!
}

input CreateAnswerInput
  @join__type(graph: QUESTIONNAIRE)
{
  value: String!
  questionId: String!
}

input CreatePageInput
  @join__type(graph: QUESTIONNAIRE)
{
  pageLevel: Int!
  questionnaireUUID: ID!
}

input CreateQuestionInput
  @join__type(graph: QUESTIONNAIRE)
{
  question: String!
  pageId: String!
  questionTypeId: String!
}

input CreateQuestionnaireInput
  @join__type(graph: QUESTIONNAIRE)
{
  name: String!
}

input CreateQuestionTypeInput
  @join__type(graph: QUESTIONNAIRE)
{
  name: String!
}

scalar DateTime
  @join__type(graph: QUESTIONNAIRE)

input DeleteAnswerInput
  @join__type(graph: QUESTIONNAIRE)
{
  uuid: ID!
}

input DeletePageInput
  @join__type(graph: QUESTIONNAIRE)
{
  uuid: ID!
}

input DeleteQuestionInput
  @join__type(graph: QUESTIONNAIRE)
{
  uuid: ID!
}

input DeleteQuestionnaireInput
  @join__type(graph: QUESTIONNAIRE)
{
  uuid: ID!
}

input DeleteQuestionTypeInput
  @join__type(graph: QUESTIONNAIRE)
{
  uuid: ID!
}

scalar join__FieldSet

enum join__Graph {
  QUESTIONNAIRE @join__graph(name: "questionnaire", url: "http://localhost:4010/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: QUESTIONNAIRE)
{
  createQuestionnaire(input: CreateQuestionnaireInput!): Questionnaire!
  deleteQuestionnaire(input: DeleteQuestionnaireInput!): Questionnaire!
  updateQuestionnaire(input: UpdateQuestionnaireInput!): Questionnaire!
  createPage(input: CreatePageInput!): Page!
  deletePage(input: DeletePageInput!): Page!
  updatePage(input: UpdatePageInput!): Page!
  createQuestionType(input: CreateQuestionTypeInput!): QuestionType!
  deleteQuestionType(input: DeleteQuestionTypeInput!): QuestionType!
  updateQuestionType(input: UpdateQuestionTypeInput!): QuestionType!
  createQuestion(input: CreateQuestionInput!): Question!
  deleteQuestion(input: DeleteQuestionInput!): Question!
  updateQuestion(input: UpdateQuestionInput!): Question!
  createAnswer(input: CreateAnswerInput!): Answer!
  deleteAnswer(input: DeleteAnswerInput!): Answer!
  updateAnswer(input: UpdateAnswerInput!): Answer!
}

type Page
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  created: DateTime!
  pageLevel: Int!
  questionnaire: Questionnaire!
  questions: [Question]!
  updated: DateTime!
  uuid: ID!
}

type Query
  @join__type(graph: QUESTIONNAIRE)
{
  getAllQuestionnaires: [Questionnaire!]!
  getQuestionnaire(uuid: ID!): Questionnaire!
  getAllPages: [Page!]!
  getPage(uuid: ID!): Page!
  getAllQuestionTypes: [QuestionType!]!
  getQuestionType(uuid: ID!): QuestionType!
  getAllQuestions: [Question!]!
  getQuestion(uuid: ID!): Question!
  getAllAnswers: [Answer!]!
  getAnswer(uuid: ID!): Answer!
}

type Question
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  answers: [Answer]!
  created: DateTime!
  page: Page!
  question: String!
  questiontype: QuestionType!
  updated: DateTime!
  uuid: ID!
}

type Questionnaire
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  created: DateTime!
  name: String!
  pages: [Page]
  updated: DateTime!
  uuid: ID!
}

type QuestionType
  @join__type(graph: QUESTIONNAIRE, key: "uuid")
{
  created: DateTime!
  name: String!
  questions: [Question]
  updated: DateTime!
  uuid: ID!
}

input UpdateAnswerInput
  @join__type(graph: QUESTIONNAIRE)
{
  value: String!
  questionId: String
  uuid: ID!
}

input UpdatePageInput
  @join__type(graph: QUESTIONNAIRE)
{
  pageLevel: Int
  questionnaireUUID: ID
  uuid: ID!
}

input UpdateQuestionInput
  @join__type(graph: QUESTIONNAIRE)
{
  question: String
  pageId: String
  questionTypeId: String
  uuid: ID!
}

input UpdateQuestionnaireInput
  @join__type(graph: QUESTIONNAIRE)
{
  name: String
  uuid: ID!
}

input UpdateQuestionTypeInput
  @join__type(graph: QUESTIONNAIRE)
{
  name: String!
  uuid: ID!
}
