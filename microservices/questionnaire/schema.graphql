extend schema @link(url: "https://specs.apollo.dev/federation/v2.1", import: ["@key", "@shareable"])

scalar DateTime

input CreateQuestionnaireInput {
  name: String!
}

input UpdateQuestionnaireInput {
  name: String
  uuid: ID!
}

input DeleteQuestionnaireInput {
  uuid: ID!
}

input CreatePageInput {
  pageLevel: Int!
  questionnaireUUID: ID! 
}

input UpdatePageInput {
  pageLevel: Int
  questionnaireUUID: ID 
  uuid: ID!
}

input DeletePageInput {
  uuid: ID!
}

input CreateQuestionTypeInput {
  name: String!
}

input UpdateQuestionTypeInput {
  name: String!
  uuid: ID!
}

input DeleteQuestionTypeInput {
  uuid: ID!
}

input CreateQuestionInput {
  question: String!
  pageId: String!
  questionTypeId: String!
}

input UpdateQuestionInput {
  question: String
  pageId: String
  questionTypeId: String
  uuid: ID!
}

input DeleteQuestionInput {
  uuid: ID!
}

input CreateAnswerInput {
  value: String!
  questionId: String!
}

input UpdateAnswerInput {
  value: String!
  questionId: String
  uuid: ID!
}

input DeleteAnswerInput {
  uuid: ID!
}


type Page @key(fields: "uuid") {
  created: DateTime!
  pageLevel: Int!
  questionnaire: Questionnaire!
  questions: [Question]!
  updated: DateTime!
  uuid: ID!
}

type Question @key(fields: "uuid") {
  answers: [Answer]!
  created: DateTime!
  page: Page!
  question: String!
  questiontype: QuestionType!
  updated: DateTime!
  uuid: ID!
}

type QuestionType @key(fields: "uuid") {
  created: DateTime!
  name: String!
  questions: [Question]
  updated: DateTime!
  uuid: ID!
}

type Questionnaire @key(fields: "uuid") {
  created: DateTime!
  name: String!
  pages: [Page]
  updated: DateTime!
  uuid: ID!
}

type Answer @key(fields: "uuid") {
  created: DateTime!
  question: Question!
  updated: DateTime!
  uuid: ID!
  value: String!
}

type Mutation {
  createQuestionnaire(input: CreateQuestionnaireInput!): Questionnaire!
  deleteQuestionnaire(input: DeleteQuestionnaireInput!): Questionnaire!
  updateQuestionnaire(input: UpdateQuestionnaireInput!): Questionnaire!

  createPage(input: CreatePageInput!): Page!
  deletePage(input: DeletePageInput!): Page!
  updatePage(input: UpdatePageInput!): Page!

  createQuestionType(input: CreateQuestionTypeInput!): QuestionType!
  deleteQuestionType(input: DeleteQuestionTypeInput!): QuestionType!
  updateQuestionType(input: UpdateQuestionTypeInput!): QuestionType!

  createQuestion(input: CreateQuestionInput!): Question!
  deleteQuestion(input: DeleteQuestionInput!): Question!
  updateQuestion(input: UpdateQuestionInput!): Question!

  createAnswer(input: CreateAnswerInput!): Answer!
  deleteAnswer(input: DeleteAnswerInput!): Answer!
  updateAnswer(input: UpdateAnswerInput!): Answer!
}

type Query {
  getAllQuestionnaires: [Questionnaire!]!
  getQuestionnaire(uuid: ID!): Questionnaire!

  getAllPages: [Page!]!
  getPage(uuid: ID!): Page!

  getAllQuestionTypes: [QuestionType!]!
  getQuestionType(uuid: ID!): QuestionType!

  getAllQuestions: [Question!]!
  getQuestion(uuid: ID!): Question!

  getAllAnswers: [Answer!]!
  getAnswer(uuid: ID!): Answer!
}
